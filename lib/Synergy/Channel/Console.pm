use v5.24.0;
use warnings;
package Synergy::Channel::Console;

use utf8;

use Moose;
use experimental qw(signatures);
use JSON::MaybeXS;

use Synergy::External::Slack;
use Synergy::Event;
use Synergy::Logger '$Logger';

use namespace::autoclean;
use List::Util qw(max);

use Term::ANSIColor qw(colored);

with 'Synergy::Role::Channel';

my %Theme = (
             # decoration   text
  cyan    => [         75,   117 ],
  green   => [         10,    84 ],
  purple  => [        140,    13 ],
);

has theme => (
  is  => 'ro',
  isa => 'Str',
);

has from_address => (
  is  => 'ro',
  isa => 'Str',
  default => 'sysop',
);

has default_public_reply_address => (
  is  => 'ro',
  isa => 'Str',
  default => '#public',
);

has send_only => (
  is  => 'ro',
  isa => 'Bool',
  default => 0,
);

has stream => (
  reader    => '_stream',
  init_arg  => undef,
  lazy      => 1,
  builder   => '_build_stream',
);

sub _build_stream {
  my ($channel) = @_;
  Scalar::Util::weaken($channel);

  open(my $cloned_stdout, ">&STDOUT") or die "Can't dup STDOUT: $!";
  open(my $cloned_stdin , ">&STDIN")  or die "Can't dup STDIN: $!";

  binmode $cloned_stdout, ':pop'; # remove utf8
  binmode $cloned_stdin,  ':pop'; # remove utf8

  my %arg = (
    write_handle => $cloned_stdout,
    encoding     => 'UTF-8',
    # autoflush    => 1,
  );

  unless($channel->send_only) {
    $arg{read_handle} = $cloned_stdin,
    $arg{on_read}     = sub {
      my ( $self, $buffref, $eof ) = @_;

       while( $$buffref =~ s/^(.*\n)// ) {
          my $text = $1;
          chomp $text;

          my $event = $channel->_event_from_text($text);
          next unless $event;

          $channel->hub->handle_event($event);
       }

       return 0;
    };
  }

  return IO::Async::Stream->new(%arg);
}

sub _display_message ($self, $text) {
  state $B_TL  = q{╭};
  state $B_BL  = q{╰};
  state $B_TR  = q{╮};
  state $B_BR  = q{╯};
  state $B_ver = q{│};
  state $B_hor = q{─};

  my $theme = $self->theme ? $Theme{ $self->theme } : undef;

  my $text_C = $theme ? Term::ANSIColor::color("ansi$theme->[1]") : q{};
  my $line_C = $theme ? Term::ANSIColor::color("ansi$theme->[0]") : q{};
  my $null_C = $theme ? Term::ANSIColor::color('reset')           : q{};

  my $header = "$line_C$B_TL" . ($B_hor x '77') . "$B_TR$null_C\n";
  my $footer = "$line_C$B_BL" . ($B_hor x '77') . "$B_BR$null_C\n";

  my $new_text = q{};

  for my $line (split /\n/, $text) {
    $new_text .= "$line_C$B_ver $text_C";
    $new_text .= sprintf '%-76s', $line;
    $new_text .= "$line_C$B_ver" if length $line <= 76;
    $new_text .= "$null_C\n";
  }

  $self->_stream->write($header);
  $self->_stream->write($new_text);
  $self->_stream->write($footer);

  return
}

my %HELP;
$HELP{''} = <<'EOH';
You're using the Console channel, which is generally used for testing or
diagnostics.  You can just type a message and hit enter.  Some funky
options exist to aid testing.

Help topics:

  diag   - commands for inspecting the Synergy configuration
  events - how to affect the events generated by your messages

You can use "/help TOPIC" to read more.

To send a message that begins with a literal "/", start with "//" instead.
EOH

$HELP{diag} = <<'EOH';
Some commands exist to let you learn about the running Synergy.  These will
probably change over time.

  /channels - print the registered channels
  /reactors - print the registered reactors
  /users    - print unknown users

  /console  - print configuration of this Console channel
EOH

$HELP{events} = <<'EOH';
You can begin your message with a string inside braces.  The string is made
up of instructions separated by spaces.  They can be:

  f:STRING      -- make this event have a different from address
  d:STRING      -- make this event have a different default reply address
  p[ublic]:BOOL -- sets event is_public; (false by default)
  t:BOOL        -- sets event's was_targeted; (true by default)

So to make the current message appear to be public and to come from "jem",
enter:

  {p:1 f:jem} Hi!

The braced string and any following spaces are stripped.
EOH

sub _console_cmd_help ($self, $arg) {
  my $for = $HELP{ length $arg ? lc $arg : q{} };

  unless ($for) {
    $self->_display_message("No help on that topic!");
    return;
  }

  $self->_display_message($for);
  return;
}

sub _console_cmd_channels ($self, $arg) {
  my @channels = sort {; $a->name cmp $b->name } $self->hub->channels;
  my $width    = max map {; length $_->name } @channels;

  my $output = "Registered Channels\n\n";
  $output .= sprintf "  %-*s - %s\n", $width, $_->name, ref($_) for @channels;

  $self->_display_message($output);
}

sub _console_cmd_reactors ($self, $arg) {
  my @reactors = sort {; $a->name cmp $b->name } $self->hub->reactors;
  my $width    = max map {; length $_->name } @reactors;

  my $output = "Registered Reactors\n\n";
  $output .= sprintf "  %-*s - %s\n", $width, $_->name, ref($_) for @reactors;

  $self->_display_message($output);
}

sub _console_cmd_users ($self, $arg) {
  my @users = sort {; $a->username cmp $b->username }
              $self->hub->user_directory->all_users;

  my $width = max map {; length $_->username } @users;

  my $output = "Known Users\n\n";
  for my $user (@users) {
    my @status;
    push @status, 'deleted' if $user->is_deleted;
    push @status, 'master'  if $user->is_master;
    push @status, 'virtual' if $user->is_virtual;

    my %ident = map {; @$_ } $user->identity_pairs;

    push @status, map {; "$_!$ident{$_}" } sort keys %ident;

    $output .= sprintf "  %-*s - %s\n",
      $width, $user->username,
      join q{; }, @status;
  }

  $self->_display_message($output);
}

sub _console_cmd_console ($self, $arg) {
  my $output = qq{Channel configuration:\n\n};

  my $width = 15;
  $output .= sprintf "%-*s: %s\n", $width, 'name', $self->name;
  $output .= sprintf "%-*s: %s\n", $width, 'theme', $self->theme // '(none)';
  $output .= sprintf "%-*s: %s\n", $width, 'default from', $self->from_address;
  $output .= sprintf "%-*s: %s\n",
    $width, 'public address',
    $self->default_public_reply_address;

  $self->_display_message($output);
}

sub _event_from_text ($self, $text) {
  # Remove any leading "/".  If there's a leading slash, we're just sending a
  # normal message with a leading slash.  (The now-removed slash was here to
  # escape this one.)  Otherwise, we're looking for a Console channel slash
  # command.
  if ($text =~ s{\A/}{} && $text !~ m{\A/}) {
    my ($cmd, $rest) = split /\s+/, $text, 2;

    if (my $code =$self->can("_console_cmd_$cmd")) {
      $self->$code($rest);
      return undef;
    }

    $self->_display_message("No such console command: /$cmd");
    return undef;
  }

  my %arg = (
    type => 'message',
    text => $text,
    was_targeted  => 1,
    is_public     => 0,
    from_channel  => $self,
    from_address  => $self->from_address,
    transport_data => { text => $text },
  );

  if ($arg{text} =~ s/\A \{ ([^}]+?) \} \s+//x) {
    # Crazy format for producing custom events by hand! -- rjbs, 2018-03-16
    #
    # If no colon/value, booleans default to becoming true.
    #
    # f:STRING      -- change the from address
    # d:STRING      -- change the default reply address
    # p[ublic]:BOOL -- set whether is public
    # t:BOOL        -- set whether targeted
    my @flags = split /\s+/, $1;
    FLAG: for my $flag (@flags) {
      my ($k, $v) = split /:/, $flag;

      if ($k eq 'f') {
        unless (defined $v) {
          $Logger->log([
            "console event on %s: ignoring valueless 'f' flag",
            $self->name,
          ]);
          next FLAG;
        }
        $arg{from_address} = $v;
        next FLAG;
      }

      if ($k eq 'd') {
        unless (defined $v) {
          $Logger->log([
            "console event on %s: ignoring valueless 'd' flag",
            $self->name,
          ]);
          next FLAG;
        }
        $arg{transport_data}{default_reply_address} = $v;
        next FLAG;
      }

      if ($k eq 't') {
        $v //= 1;
        $arg{was_targeted} = $v;
        next FLAG;
      }

      if ($k eq substr("public", 0, length $k)) {
        $v //= 1;
        $arg{is_public} = $v;
        next FLAG;
      }
    }
  }

  $arg{conversation_address}
    =   $arg{transport_data}{default_reply_address}
    //= $arg{is_public}
      ? $self->default_public_reply_address
      : $arg{from_address};

  my $user = $self->hub->user_directory->user_by_channel_and_address(
    $self,
    $arg{from_address},
  );

  $arg{from_user} = $user if $user;

  return Synergy::Event->new(\%arg);
}

my %Theme = (
  blue    => [  27,  14 ],
  green   => [  77, 118 ],
  purple  => [ 140, 201 ],
);

sub start ($self) {
  die "bogus theme" if $self->theme && ! $Theme{$self->theme};
  $self->hub->loop->add($self->_stream);
}

sub send_message_to_user ($self, $user, $text, $alts = {}) {
  $self->send_message($user->username, $text, $alts);
}

sub _format_message ($self, $name, $address, $text) {
  my $theme = $self->theme;

  return ">>> $name!$address > $text\n" unless $theme;

  my @T = $Theme{ $self->theme }->@*;
  return colored([ "ansi$T[0]" ], ">>> ")
       . colored([ "ansi$T[1]" ], $name)
       . colored([ "ansi$T[0]" ], "!")
       . colored([ "ansi$T[1]" ], $address)
       . colored([ "ansi$T[0]" ], " > ")
       . colored([ "ansi$T[1]" ], $text)
       . "\n";
}

sub send_message ($self, $address, $text, $alts = {}) {
  my $name = $self->name;
  print { $self->_stream->write_handle }
    $self->_format_message($name, $address, $text);
  return;
}

sub describe_event ($self, $event) {
  return "(a console event)";
}

sub describe_conversation ($self, $event) {
  return "[console]";
}

1;
